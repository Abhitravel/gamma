# gamma_blast_tracker.py
# Flask app with NSE option chain data fetching + gamma exposure calculation + chart output

import json
import requests
from flask import Flask, jsonify, render_template, send_file
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
import os

app = Flask(__name__, template_folder="templates")

NSE_HEADERS = {
    'User-Agent': 'Mozilla/5.0',
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept-Encoding': 'gzip, deflate, br',
    'Referer': 'https://www.nseindia.com/option-chain'
}

NSE_OC_URL = "https://www.nseindia.com/api/option-chain-indices?symbol=NIFTY"


def fetch_option_chain():
    session = requests.Session()
    session.get("https://www.nseindia.com", headers=NSE_HEADERS)
    res = session.get(NSE_OC_URL, headers=NSE_HEADERS)
    res.raise_for_status()
    return res.json()


def calculate_gamma_exposure(data):
    records = []
    for item in data['records']['data']:
        strike = item.get('strikePrice')
        expiry = item.get('expiryDate')
        ce = item.get('CE')
        pe = item.get('PE')

        if ce:
            ce_oi = ce.get('openInterest', 0)
            ce_gamma = ce.get('greeks', {}).get('gamma', 0)
            ce_gex = ce_oi * ce_gamma * 100
        else:
            ce_gex = 0

        if pe:
            pe_oi = pe.get('openInterest', 0)
            pe_gamma = pe.get('greeks', {}).get('gamma', 0)
            pe_gex = pe_oi * pe_gamma * 100
        else:
            pe_gex = 0

        total_gex = ce_gex + pe_gex
        records.append({
            'strike': strike,
            'expiry': expiry,
            'ce_gex': ce_gex,
            'pe_gex': pe_gex,
            'total_gex': total_gex
        })

    df = pd.DataFrame(records)
    df = df.sort_values(by='strike')
    return df


def plot_gamma_exposure(df):
    plt.figure(figsize=(12, 6))
    plt.bar(df['strike'], df['total_gex'], color='skyblue')
    plt.title('Gamma Exposure Across Strike Prices')
    plt.xlabel('Strike Price')
    plt.ylabel('Total Gamma Exposure')
    plt.grid(True)
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    img_base64 = base64.b64encode(buf.read()).decode('utf-8')
    plt.close()
    return img_base64


@app.route("/")
def dashboard():
    raw_data = fetch_option_chain()
    df = calculate_gamma_exposure(raw_data)
    chart_img = plot_gamma_exposure(df)
    return render_template("dashboard.html", table=df.to_html(index=False), chart=chart_img)


@app.route("/gamma-blast")
def gamma_blast():
    raw_data = fetch_option_chain()
    df = calculate_gamma_exposure(raw_data)
    return df.to_json(orient='records')


@app.route("/gamma-chart")
def gamma_chart():
    raw_data = fetch_option_chain()
    df = calculate_gamma_exposure(raw_data)
    chart_img = plot_gamma_exposure(df)
    html = f'<img src="data:image/png;base64,{chart_img}"/>'
    return html


if __name__ == '__main__':
    os.makedirs("templates", exist_ok=True)
    with open("templates/dashboard.html", "w") as f:
        f.write("""
        <html>
        <head>
            <title>Gamma Blast Dashboard</title>
            <meta http-equiv="refresh" content="60">
        </head>
        <body>
            <h1>Gamma Exposure Dashboard</h1>
            <div>{{ table|safe }}</div>
            <h2>Gamma Exposure Chart</h2>
            <div><img src='data:image/png;base64,{{ chart }}'/></div>
        </body>
        </html>
        """)
    app.run(debug=True, port=5000)
